{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_BY_SEARCH, START_LOADING, END_LOADING, FETCH_POST, COMMENT } from \"../constants/actionTypes\";\nimport * as api from \"../api\"; //action creators\n\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    history(`/posts/${data._id}`);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likepost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: COMMENT,\n      payload: data\n    });\n    return data.comments;\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/Users/navneetkumar/Desktop/Full_stack_blog-MERN/client/src/actions/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","FETCH_BY_SEARCH","START_LOADING","END_LOADING","FETCH_POST","COMMENT","api","getPost","id","dispatch","type","data","fetchPost","payload","e","console","log","getPosts","page","currentPage","numberOfPages","fetchPosts","error","message","createPost","post","history","_id","updatePost","deletePost","likepost","user","JSON","parse","localStorage","getItem","likePost","token","getPostsBySearch","searchQuery","fetchPostsBySearch","commentPost","value","comment","comments"],"mappings":"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","sourcesContent":["import {\n  FETCH_ALL,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n  FETCH_BY_SEARCH,\n  START_LOADING,\n  END_LOADING,\n  FETCH_POST,\n  COMMENT,\n} from \"../constants/actionTypes\";\nimport * as api from \"../api\";\n//action creators\n\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchPost(id);\n    dispatch({ type: FETCH_POST, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const {\n      data: { data, currentPage, numberOfPages },\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: { data, currentPage, numberOfPages },\n    });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const createPost = (post, history) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createPost(post);\n    history(`/posts/${data._id}`);\n    dispatch({ type: CREATE, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.updatePost(id, post);\n    dispatch({ type: UPDATE, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likepost = (id) => async (dispatch) => {\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  try {\n    const { data } = await api.likePost(id, user?.token);\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const {\n      data: { data },\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({ type: FETCH_BY_SEARCH, payload: { data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const commentPost = (value, id) => async (dispatch) => {\n  try {\n    const { data } = await api.comment(value, id);\n    dispatch({ type: COMMENT, payload: data });\n    return data.comments;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}