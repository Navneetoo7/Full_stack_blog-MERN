{"ast":null,"code":"var _jsxFileName = \"/Users/navneetkumar/Desktop/blog full stack/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import useStyles from \"./styles\";\n// import { TextField, Button, Typography, Paper } from \"@material-ui/core\";\n// import FileBase from \"react-file-base64\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { createPost, updatePost } from \"../../actions/posts\";\n// //get the current post id for update\n// const Form = ({ currentId, setCurrentId }) => {\n//   const [postData, setPostData] = useState({\n//     creator: \"\",\n//     title: \"\",\n//     message: \"\",\n//     tags: \"\",\n//     selectedFile: \"\",\n//   });\n//   const dispatch = useDispatch();\n//   const post = useSelector((state) =>\n//     currentId ? state.posts.find((message) => message._id === currentId) : null\n//   );\n//   useEffect(() => {\n//     if (post) setPostData(post);\n//   }, [post]);\n//   console.log(\"post\", post);\n//   const classes = useStyles();\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     if (currentId) {\n//       dispatch(updatePost(currentId, postData));\n//     } else {\n//       dispatch(createPost(postData));\n//     }\n//     clear();\n//   };\n//   const getFiles = (files) => {\n//     setPostData({ ...postData, selectedFile: files.base64 });\n//   };\n//   const clear = () => {\n//     setCurrentId(null);\n//     setPostData({\n//       creator: \"\",\n//       title: \"\",\n//       message: \"\",\n//       tags: \"\",\n//       selectedFile: \"\",\n//     });\n//   };\n//   return (\n//     <Paper className={classes.paper}>\n//       <form\n//         autoComplete=\"off\"\n//         noValidate\n//         className={`${classes.root}${classes.form}`}\n//         onSubmit={handleSubmit}\n//       >\n//         <Typography variant=\"h6\">\n//           {currentId ? \"Editing\" : \"Creating\"} a Memory\n//         </Typography>\n//         <TextField\n//           name=\"creator\"\n//           variant=\"outlined\"\n//           label=\"Creator\"\n//           fullWidth\n//           value={postData.creator}\n//           onChange={(e) =>\n//             setPostData({ ...postData, creator: e.target.value })\n//           }\n//         />\n//         <TextField\n//           name=\"title\"\n//           variant=\"outlined\"\n//           label=\"Title\"\n//           fullWidth\n//           value={postData.title}\n//           onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n//         />\n//         <TextField\n//           name=\"message\"\n//           variant=\"outlined\"\n//           label=\"Message\"\n//           fullWidth\n//           value={postData.message}\n//           onChange={(e) =>\n//             setPostData({ ...postData, message: e.target.value })\n//           }\n//         />\n//         <TextField\n//           name=\"tags\"\n//           variant=\"outlined\"\n//           label=\"Tags\"\n//           fullWidth\n//           value={postData.tags}\n//           onChange={(e) =>\n//             setPostData({ ...postData, tags: e.target.value?.split(\",\") })\n//           }\n//         />\n//         <div className={classes.fileInput}>\n//           <FileBase type=\"file\" multiple={false} onDone={getFiles.bind(this)} />\n//         </div>\n//         {console.log(postData)}\n//         <Button\n//           className={classes.buttonSubmit}\n//           color=\"primary\"\n//           variant=\"contained\"\n//           size=\"large\"\n//           type=\"submit\"\n//           fullWidth\n//         >\n//           Submit\n//         </Button>\n//         <Button\n//           color=\"secondary\"\n//           variant=\"contained\"\n//           size=\"small\"\n//           onClick={clear}\n//           fullWidth\n//         >\n//           Clear\n//         </Button>\n//       </form>\n//     </Paper>\n//   );\n// };\n// export default Form;\nimport React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FileBase from \"react-file-base64\";\nimport { createPost, updatePost } from \"../../actions/posts\";\nimport useStyles from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\"\n  });\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\"\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Please Sign In to create your own memories and like other's memories.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: currentId ? `Editing \"${post.title}\"` : \"Creating a Memory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags (coma separated)\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(\",\")\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"Ni2pyC3CJDRhHSQl4csDS34cUOg=\", false, function () {\n  return [useSelector, useDispatch, useStyles];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/navneetkumar/Desktop/blog full stack/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","useDispatch","useSelector","FileBase","createPost","updatePost","useStyles","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","post","state","posts","find","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","clear","handleSubmit","e","preventDefault","name","result","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappingsgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,UAA5B,EAAwCC,KAAxC,QAAqD,mBAArD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,qBAAvC;AACA,OAAOC,SAAP,MAAsB,UAAtB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAiC;AAAA;;AAAA;;AAC5C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC;AACvCiB,IAAAA,KAAK,EAAE,EADgC;AAEvCC,IAAAA,OAAO,EAAE,EAF8B;AAGvCC,IAAAA,IAAI,EAAE,EAHiC;AAIvCC,IAAAA,YAAY,EAAE;AAJyB,GAAD,CAAxC;AAMA,QAAMC,IAAI,GAAGd,WAAW,CAAEe,KAAD,IACvBT,SAAS,GAAGS,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAkBN,OAAD,IAAaA,OAAO,CAACO,GAAR,KAAgBZ,SAA9C,CAAH,GAA8D,IADjD,CAAxB;AAGA,QAAMa,QAAQ,GAAGpB,WAAW,EAA5B;AACA,QAAMqB,OAAO,GAAGhB,SAAS,EAAzB;AACA,QAAMiB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb;AAEA/B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,IAAJ,EAAUL,WAAW,CAACK,IAAD,CAAX;AACX,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMY,KAAK,GAAG,MAAM;AAClBnB,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,IAAAA,WAAW,CAAC;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,OAAO,EAAE,EAAtB;AAA0BC,MAAAA,IAAI,EAAE,EAAhC;AAAoCC,MAAAA,YAAY,EAAE;AAAlD,KAAD,CAAX;AACD,GAHD;;AAKA,QAAMc,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAIvB,SAAS,KAAK,CAAlB,EAAqB;AAAA;;AACnBa,MAAAA,QAAQ,CAACjB,UAAU,CAAC,EAAE,GAAGM,QAAL;AAAesB,QAAAA,IAAI,EAAET,IAAF,aAAEA,IAAF,uCAAEA,IAAI,CAAEU,MAAR,iDAAE,aAAcD;AAAnC,OAAD,CAAX,CAAR;AACAJ,MAAAA,KAAK;AACN,KAHD,MAGO;AAAA;;AACLP,MAAAA,QAAQ,CACNhB,UAAU,CAACG,SAAD,EAAY,EAAE,GAAGE,QAAL;AAAesB,QAAAA,IAAI,EAAET,IAAF,aAAEA,IAAF,wCAAEA,IAAI,CAAEU,MAAR,kDAAE,cAAcD;AAAnC,OAAZ,CADJ,CAAR;AAGAJ,MAAAA,KAAK;AACN;AACF,GAZD;;AAcA,MAAI,EAACL,IAAD,aAACA,IAAD,wCAACA,IAAI,CAAEU,MAAP,kDAAC,cAAcD,IAAf,CAAJ,EAAyB;AACvB,wBACE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEV,OAAO,CAACY,KAA1B;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAyB,QAAA,KAAK,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAED,sBACE,QAAC,KAAD;AAAO,IAAA,SAAS,EAAEZ,OAAO,CAACY,KAA1B;AAAA,2BACE;AACE,MAAA,YAAY,EAAC,KADf;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,SAAS,EAAG,GAAEZ,OAAO,CAACa,IAAK,IAAGb,OAAO,CAACc,IAAK,EAH7C;AAIE,MAAA,QAAQ,EAAEP,YAJZ;AAAA,8BAME,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA,kBACGrB,SAAS,GAAI,YAAWQ,IAAI,CAACJ,KAAM,GAA1B,GAA+B;AAD3C;AAAA;AAAA;AAAA;AAAA,cANF,eASE,QAAC,SAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,KAAK,EAAC,OAHR;AAIE,QAAA,SAAS,MAJX;AAKE,QAAA,KAAK,EAAEF,QAAQ,CAACE,KALlB;AAME,QAAA,QAAQ,EAAGkB,CAAD,IAAOnB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,UAAAA,KAAK,EAAEkB,CAAC,CAACO,MAAF,CAASC;AAA/B,SAAD;AAN9B;AAAA;AAAA;AAAA;AAAA,cATF,eAiBE,QAAC,SAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,KAAK,EAAC,SAHR;AAIE,QAAA,SAAS,MAJX;AAKE,QAAA,SAAS,MALX;AAME,QAAA,IAAI,EAAE,CANR;AAOE,QAAA,KAAK,EAAE5B,QAAQ,CAACG,OAPlB;AAQE,QAAA,QAAQ,EAAGiB,CAAD,IACRnB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeG,UAAAA,OAAO,EAAEiB,CAAC,CAACO,MAAF,CAASC;AAAjC,SAAD;AATf;AAAA;AAAA;AAAA;AAAA,cAjBF,eA6BE,QAAC,SAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,KAAK,EAAC,uBAHR;AAIE,QAAA,SAAS,MAJX;AAKE,QAAA,KAAK,EAAE5B,QAAQ,CAACI,IALlB;AAME,QAAA,QAAQ,EAAGgB,CAAD,IACRnB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeI,UAAAA,IAAI,EAAEgB,CAAC,CAACO,MAAF,CAASC,KAAT,CAAeC,KAAf,CAAqB,GAArB;AAArB,SAAD;AAPf;AAAA;AAAA;AAAA;AAAA,cA7BF,eAuCE;AAAK,QAAA,SAAS,EAAEjB,OAAO,CAACkB,SAAxB;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,QAAQ,EAAE,KAFZ;AAGE,UAAA,MAAM,EAAE,CAAC;AAAEC,YAAAA;AAAF,WAAD,KACN9B,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeK,YAAAA,YAAY,EAAE0B;AAA7B,WAAD;AAJf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAvCF,eAgDE,QAAC,MAAD;AACE,QAAA,SAAS,EAAEnB,OAAO,CAACoB,YADrB;AAEE,QAAA,OAAO,EAAC,WAFV;AAGE,QAAA,KAAK,EAAC,SAHR;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,IAAI,EAAC,QALP;AAME,QAAA,SAAS,MANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhDF,eA0DE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,OAAO,EAAEd,KAJX;AAKE,QAAA,SAAS,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1DF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwED,CAvHD;;GAAMrB,I;UAOSL,W,EAGID,W,EACDK,S;;;KAXZC,I;AAyHN,eAAeA,IAAf","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import useStyles from \"./styles\";\n// import { TextField, Button, Typography, Paper } from \"@material-ui/core\";\n// import FileBase from \"react-file-base64\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { createPost, updatePost } from \"../../actions/posts\";\n// //get the current post id for update\n// const Form = ({ currentId, setCurrentId }) => {\n//   const [postData, setPostData] = useState({\n//     creator: \"\",\n//     title: \"\",\n//     message: \"\",\n//     tags: \"\",\n//     selectedFile: \"\",\n//   });\n//   const dispatch = useDispatch();\n\n//   const post = useSelector((state) =>\n//     currentId ? state.posts.find((message) => message._id === currentId) : null\n//   );\n//   useEffect(() => {\n//     if (post) setPostData(post);\n//   }, [post]);\n//   console.log(\"post\", post);\n\n//   const classes = useStyles();\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     if (currentId) {\n//       dispatch(updatePost(currentId, postData));\n//     } else {\n//       dispatch(createPost(postData));\n//     }\n//     clear();\n//   };\n//   const getFiles = (files) => {\n//     setPostData({ ...postData, selectedFile: files.base64 });\n//   };\n//   const clear = () => {\n//     setCurrentId(null);\n//     setPostData({\n//       creator: \"\",\n//       title: \"\",\n//       message: \"\",\n//       tags: \"\",\n//       selectedFile: \"\",\n//     });\n//   };\n\n//   return (\n//     <Paper className={classes.paper}>\n//       <form\n//         autoComplete=\"off\"\n//         noValidate\n//         className={`${classes.root}${classes.form}`}\n//         onSubmit={handleSubmit}\n//       >\n//         <Typography variant=\"h6\">\n//           {currentId ? \"Editing\" : \"Creating\"} a Memory\n//         </Typography>\n//         <TextField\n//           name=\"creator\"\n//           variant=\"outlined\"\n//           label=\"Creator\"\n//           fullWidth\n//           value={postData.creator}\n//           onChange={(e) =>\n//             setPostData({ ...postData, creator: e.target.value })\n//           }\n//         />\n//         <TextField\n//           name=\"title\"\n//           variant=\"outlined\"\n//           label=\"Title\"\n//           fullWidth\n//           value={postData.title}\n//           onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n//         />\n//         <TextField\n//           name=\"message\"\n//           variant=\"outlined\"\n//           label=\"Message\"\n//           fullWidth\n//           value={postData.message}\n//           onChange={(e) =>\n//             setPostData({ ...postData, message: e.target.value })\n//           }\n//         />\n//         <TextField\n//           name=\"tags\"\n//           variant=\"outlined\"\n//           label=\"Tags\"\n//           fullWidth\n//           value={postData.tags}\n//           onChange={(e) =>\n//             setPostData({ ...postData, tags: e.target.value?.split(\",\") })\n//           }\n//         />\n//         <div className={classes.fileInput}>\n//           <FileBase type=\"file\" multiple={false} onDone={getFiles.bind(this)} />\n//         </div>\n//         {console.log(postData)}\n//         <Button\n//           className={classes.buttonSubmit}\n//           color=\"primary\"\n//           variant=\"contained\"\n//           size=\"large\"\n//           type=\"submit\"\n//           fullWidth\n//         >\n//           Submit\n//         </Button>\n//         <Button\n//           color=\"secondary\"\n//           variant=\"contained\"\n//           size=\"small\"\n//           onClick={clear}\n//           fullWidth\n//         >\n//           Clear\n//         </Button>\n//       </form>\n//     </Paper>\n//   );\n// };\n// export default Form;\nimport React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FileBase from \"react-file-base64\";\n\nimport { createPost, updatePost } from \"../../actions/posts\";\nimport useStyles from \"./styles\";\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\",\n  });\n  const post = useSelector((state) =>\n    currentId ? state.posts.find((message) => message._id === currentId) : null\n  );\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ title: \"\", message: \"\", tags: \"\", selectedFile: \"\" });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(createPost({ ...postData, name: user?.result?.name }));\n      clear();\n    } else {\n      dispatch(\n        updatePost(currentId, { ...postData, name: user?.result?.name })\n      );\n      clear();\n    }\n  };\n\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paper}>\n        <Typography variant=\"h6\" align=\"center\">\n          Please Sign In to create your own memories and like other's memories.\n        </Typography>\n      </Paper>\n    );\n  }\n\n  return (\n    <Paper className={classes.paper}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={`${classes.root} ${classes.form}`}\n        onSubmit={handleSubmit}\n      >\n        <Typography variant=\"h6\">\n          {currentId ? `Editing \"${post.title}\"` : \"Creating a Memory\"}\n        </Typography>\n        <TextField\n          name=\"title\"\n          variant=\"outlined\"\n          label=\"Title\"\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n        <TextField\n          name=\"message\"\n          variant=\"outlined\"\n          label=\"Message\"\n          fullWidth\n          multiline\n          rows={4}\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n        <TextField\n          name=\"tags\"\n          variant=\"outlined\"\n          label=\"Tags (coma separated)\"\n          fullWidth\n          value={postData.tags}\n          onChange={(e) =>\n            setPostData({ ...postData, tags: e.target.value.split(\",\") })\n          }\n        />\n        <div className={classes.fileInput}>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <Button\n          className={classes.buttonSubmit}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}