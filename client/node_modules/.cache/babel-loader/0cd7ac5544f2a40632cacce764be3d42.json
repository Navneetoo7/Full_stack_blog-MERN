{"ast":null,"code":"import _toConsumableArray from\"/Users/navneetkumar/Desktop/blog full stack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{FETCH_ALL,CREATE,UPDATE,DELETE,LIKE}from\"../constants/actionTypes\";export default(function(){var posts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case DELETE:return posts.filter(function(post){return post._id!==action.payload;});case UPDATE:return posts.map(function(post){return post._id===action.payload._id?action.payload:post;});case LIKE:return posts.map(function(post){return post._id===action.payload._id?action.payload:post;});case FETCH_ALL:return action.payload;case CREATE:return[].concat(_toConsumableArray(posts),[action.payload]);default:return posts;}});","map":{"version":3,"sources":["/Users/navneetkumar/Desktop/blog full stack/client/src/reducers/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","posts","action","type","filter","post","_id","payload","map"],"mappings":"iLAAA,OACEA,SADF,CAEEC,MAFF,CAGEC,MAHF,CAIEC,MAJF,CAKEC,IALF,KAMO,0BANP,CAOA,eAAe,UAAwB,IAAvBC,CAAAA,KAAuB,2DAAf,EAAe,IAAXC,CAAAA,MAAW,2CACrC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKJ,CAAAA,MAAL,CACE,MAAOE,CAAAA,KAAK,CAACG,MAAN,CAAa,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,GAAL,GAAaJ,MAAM,CAACK,OAA9B,EAAb,CAAP,CACF,IAAKT,CAAAA,MAAL,CACE,MAAOG,CAAAA,KAAK,CAACO,GAAN,CAAU,SAACH,IAAD,QACfA,CAAAA,IAAI,CAACC,GAAL,GAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,CAAkCJ,MAAM,CAACK,OAAzC,CAAmDF,IADpC,EAAV,CAAP,CAGF,IAAKL,CAAAA,IAAL,CACE,MAAOC,CAAAA,KAAK,CAACO,GAAN,CAAU,SAACH,IAAD,QACfA,CAAAA,IAAI,CAACC,GAAL,GAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,CAAkCJ,MAAM,CAACK,OAAzC,CAAmDF,IADpC,EAAV,CAAP,CAGF,IAAKT,CAAAA,SAAL,CACE,MAAOM,CAAAA,MAAM,CAACK,OAAd,CACF,IAAKV,CAAAA,MAAL,CACE,mCAAWI,KAAX,GAAkBC,MAAM,CAACK,OAAzB,GACF,QACE,MAAON,CAAAA,KAAP,CAhBJ,CAkBD,CAnBD","sourcesContent":["import {\n  FETCH_ALL,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n} from \"../constants/actionTypes\";\nexport default (posts = [], action) => {\n  switch (action.type) {\n    case DELETE:\n      return posts.filter((post) => post._id !== action.payload);\n    case UPDATE:\n      return posts.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      );\n    case LIKE:\n      return posts.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      );\n    case FETCH_ALL:\n      return action.payload;\n    case CREATE:\n      return [...posts, action.payload];\n    default:\n      return posts;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}