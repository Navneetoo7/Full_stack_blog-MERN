{"ast":null,"code":"var _jsxFileName = \"/Users/navneetkumar/Desktop/Full_stack_blog-MERN/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useStyles from \"./styles\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPost, updatePost, getPosts } from \"../../actions/posts\"; //get the current post id for update\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\"\n  });\n  const [postI, setPostI] = useState([]);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n  console.log(\"postpostpostpost \", post);\n  useEffect(() => {}, [postI, dispatch, post]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId == create) {\n      var _user$result;\n\n      console.log(postData, \"hhjhjhjhjhjhjhj-----\");\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      console.log(postData, \"hupdatePostupdatePostupdatePost-----\");\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n\n    await setPostI(dispatch(getPosts()));\n  };\n\n  const getFiles = files => {\n    setPostData({ ...postData,\n      selectedFile: files.base64\n    });\n  };\n\n  const clear = () => {\n    setCurrentId(\"create\");\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\"\n    });\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/_jsxDEV(\"paper\", {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Please Sign In to create your own momories and like other's memories.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root}${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [currentId ? \"Editing\" : \"Creating\", \" a Memory\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        className: classes.fields,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        className: [classes.fields, classes.space],\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        className: classes.fields,\n        onChange: e => {\n          var _e$target$value;\n\n          return setPostData({ ...postData,\n            tags: (_e$target$value = e.target.value) === null || _e$target$value === void 0 ? void 0 : _e$target$value.split(\",\")\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: getFiles.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), console.log(postData), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        color: \"primary\",\n        variant: \"contained\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"secondary\",\n        variant: \"contained\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"yHtcXstezVD7bX//YnHDL0bux6c=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/navneetkumar/Desktop/Full_stack_blog-MERN/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","useStyles","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","createPost","updatePost","getPosts","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","postI","setPostI","classes","dispatch","user","JSON","parse","localStorage","getItem","post","state","posts","find","_id","console","log","handleSubmit","e","preventDefault","create","name","result","clear","getFiles","files","base64","paper","root","form","fields","target","value","space","split","fileInput","bind","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useStyles from \"./styles\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPost, updatePost, getPosts } from \"../../actions/posts\";\n//get the current post id for update\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\",\n  });\n  const [postI, setPostI] = useState([]);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  const post = useSelector((state) =>\n    currentId ? state.posts.find((message) => message._id === currentId) : null\n  );\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n  console.log(\"postpostpostpost \", post);\n  useEffect(() => {}, [postI, dispatch, post]);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (currentId == create) {\n      console.log(postData, \"hhjhjhjhjhjhjhj-----\");\n      dispatch(createPost({ ...postData, name: user?.result?.name }));\n      clear();\n    } else {\n      console.log(postData, \"hupdatePostupdatePostupdatePost-----\");\n      dispatch(\n        updatePost(currentId, { ...postData, name: user?.result?.name })\n      );\n      clear();\n    }\n\n    await setPostI(dispatch(getPosts()));\n  };\n  const getFiles = (files) => {\n    setPostData({ ...postData, selectedFile: files.base64 });\n  };\n  const clear = () => {\n    setCurrentId(\"create\");\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\",\n    });\n  };\n  if (!user?.result?.name) {\n    return (\n      <paper className={classes.paper}>\n        <Typography variant=\"h6\" align=\"center\">\n          Please Sign In to create your own momories and like other's memories.\n        </Typography>\n      </paper>\n    );\n  }\n  return (\n    <Paper className={classes.paper}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={`${classes.root}${classes.form}`}\n        onSubmit={handleSubmit}\n      >\n        <Typography variant=\"h6\">\n          {currentId ? \"Editing\" : \"Creating\"} a Memory\n        </Typography>\n        {/* <TextField\n          name=\"creator\"\n          variant=\"outlined\"\n          label=\"Creator\"\n          fullWidth\n          className={classes.fields}\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          }\n        /> */}\n        <TextField\n          name=\"title\"\n          variant=\"outlined\"\n          label=\"Title\"\n          fullWidth\n          value={postData.title}\n          className={classes.fields}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n        <TextField\n          name=\"message\"\n          variant=\"outlined\"\n          label=\"Message\"\n          fullWidth\n          multiline\n          rows={4}\n          className={[classes.fields, classes.space]}\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n        <TextField\n          name=\"tags\"\n          variant=\"outlined\"\n          label=\"Tags\"\n          fullWidth\n          value={postData.tags}\n          className={classes.fields}\n          onChange={(e) =>\n            setPostData({ ...postData, tags: e.target.value?.split(\",\") })\n          }\n        />\n        <div className={classes.fileInput}>\n          <FileBase type=\"file\" multiple={false} onDone={getFiles.bind(this)} />\n        </div>\n        {console.log(postData)}\n        <Button\n          className={classes.buttonSubmit}\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >\n          Submit\n        </Button>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n};\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}